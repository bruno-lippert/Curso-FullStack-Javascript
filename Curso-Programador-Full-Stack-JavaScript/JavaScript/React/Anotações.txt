O que é o React? 
É uma biblioteca JavaScript declarativa, eficiente e flexível a criação de interfaces de usuário(UI)

Características:
- é uma Bibliotecan não um framework
- é baseado em Components
-é usado para criar SPAs(Aplicativo de página única) - site que consiste de uma única página web com o objetivo de fornecer uma experiência do usuário similar à de um aplicativo desktop.


O que são components e porque eles são importantes
Os components permitem dividir a Interface do Usuário em partes independentes e reutilizáveis, são como funções do JS
Dois tipos de Componentes: Função e classe


O que é Jsx
Ex de JSX:
const element = <h1 className="title"> Hello world!</h1>
- JSX não é interpretado pelo browser, por este motivo devemos utilizar um transpíler(em geral o babel) para realizar essa transpilação
- Ao contrário do passado, em vez de colocar JavaScript em HTML, o JSX nos permite colocar HTML em JS

Após o transpiler o código ficara assim:
const element = React.createElement(
    "h1",
    { className: "title" },
    "Hello world!"
)
Com esse código preparamos nosso elemento para ser exibido no DOM


Como o React atualiza as views
DOM - É um objeto/interface criado pelo Browser que representa a estrututa do nosso documento HTML e que nos dá meios para interagir com ele

Virtual DOM - É uma representação em JS do DOM verdadeiro. Quando alteração e eventos acontecem, primeiro o React atualiza o Virtual DOM, analisa as mudanças e o que precisa ser atualizado no DOM, e depois realiza isso conciliando o Virtual Dom e o DOM

npx create-react-app 'nome do arquivos' - para criar um app react
npm start - faz o projeto rodar localmente no seu computador
npm build - para transpilar tudo em HTML, CSS e JS

import React, {fragment} from 'react'; -> dentro das chaves são bibliotecas sendo exportadas
O fragment serve para que aundo você não queira retornar uma div no seu component, ai você uma <fragment></fragment> em vez de div, eve ser usado pois se retornar elementos diferentes da erro

Conhecendo as preparamos
Props = Propriedades

Função pura:
Ex:
function sum(a, b) {
    return a + b;
}
- A função recebe duas propriedades a e babel
- A função não altera o valor das entradas
- Sempre retorna o mesmo resultado para os mesmos tipos de entrada

Função impura
Ex:
function withdraw(account, amount){
    account.total -= amount;
}
- A função altera o valor de sua entrada

- Todos os componentes React tem que agir como funções puras em relação ao seus props

Eventos - https://reactjs.org/docs/handling-events.html

Renderização condicional - Em React, você pode criar componentes distintos que encapsulam o comportamento que você precisa. Então, você pode renderizar apenas alguns dos elementos, dependendo do estado da sua aplicação. Renderização condicional em React funciona da mesma forma que condições funcionam em JavaScript.

Condicional no css: className={props.gray ? 'grau-img' : 'color-img'}

No JSX podemos passar funções como variáveis
Ex sem parametro:
function gteCompanyName() {
    return 'Código Fonte';
}
const title = <h1>Este é o site {getCompanyName}</h1>

Ex com parametro:
function gteCompanyName(user) {
    return `${user.firstName} ${user.lastName}`;
}
const user = {
    firstName: 'Vanessa',
    lastName: 'Weber'
};
const title = <h1>Olá, {getFullName(user)}</h1>


Estados(States) - é um objeto JS que guarda os dados de um component e determina seu comportamneto, de uma lista de itens por exemplo. Quando um estado é atualizado o component é re-renderizado.

Para declarar um estado em um component de classe:
constructor(props) {
    super(props);
    this.state = {
        count 0
    }
}
Para manipular um component em um component de classe
incrementCount() {
    this.setState((state) => {
        return {count: state.count} + 1}
    });
}

Para declarar um estado em um component funcional:
import React, { useState } from 'react'; //temos que importar o useState,  O useState nos permite criar estados em um componente criado a partir de uma função
const [count, serCount] = useState(0)

Para manipular um component em um component funcional:
setCount(count + 1)


O que é um Lifecicle
É o ciclo  de vida de um component, onde ele é inserido no DOM, atualizado e removido

Você pode monitora-os ou manipula-los durante 3 fases:
Mounting - quando um elemento é colocado no DOM
Updating - quando um componente é atualizado (ocorre sempre que ocorre uma mudança no estado ou propriedade de um component)
Unmounting - quando um component é removido de do DOM


Hooks
são uma forma de usarmos state, lifecycle e compartilharmos lógica em components funcionais

Exemplo de component com Hook de state:
import React, { useState } from 'react';

function Example() {
    const [count, setCount] = useState(0);

    return (
        <div>
            <p>You clicked {count} times</p>
            <button onClick={() => setCount(count + 1)}>
                Click me
            </button>
        </div>
    );
}

Exemplo de component com Hook associado a lifecycle:
import React, { useState, useEffect } from 'react';

function Example() {
    const [count, setCount] = useState(0);

    // Similar ao componentDidMount and componentDidUpdate
    useEffect(() => {
        //atualize o título do documento usando a API do navegador
        document.title = `You clicked ${count} times`;
    });
    
    return (
        <div>
            <p>You clicked {count} times</p>
            <button onClick={() => setCount(count + 1)}>
                Click me
            </button>
        </div>
    );
}


Controlled e Uncontrolled Components 

Uncontrolled - em geral é um componente que tem seus dados gerenciados pelo próprio DOM(como um input normal) sem relação com o state do component.
Ex:
import React from 'react'

const Form = () => {
    return (
        <div>
            <label htmlFor="name">Name: </label>
            <input type="text" id="name" />
        </div>
    )
}
export deafult Form;

Controlled - Components controlados estão associados aos estados do component, ou seja, eles exibem informações baseadas no state e quando alterados alteram também o state.
Ex:
import React, { useState } from 'react';

const Form = () => {
    const [name, setName] = useState('');
    const handleChange = (e) => setName(e.currentTarget.value)

    return (
         <div>
            <label htmlFor="name">Name: </label>
            <input type="text" id="name" value="{name}" onChange={handleChange} />
        </div>
    )
}
export deafult Form;